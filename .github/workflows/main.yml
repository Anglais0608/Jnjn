# .github/workflows/android-emulator-vnc.yml
name: Android Emulator with UI & Remote Access

on:
  workflow_dispatch:

jobs:
  emulate-and-connect:
    runs-on: ubuntu-latest
    env:
      API_LEVEL: 31
      TARGET: google_apis
      ARCH: x86_64
      AVD_NAME: test_avd
      CMDLINE_TOOLS_VERSION: "11076708"
      # Define paths centrally
      SDK_ROOT_PATH: "${HOME}/android-sdk" # Use a distinct name to avoid clashes

    steps:
      - name: Checkout code (optional)
        uses: actions/checkout@v4

      - name: Check KVM availability & Enable
        id: kvm_check
        run: |
          echo "Checking KVM..."
          sudo apt-get update -y
          sudo apt-get install -y cpu-checker qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          if sudo kvm-ok; then
            echo "KVM acceleration can be used."
            sudo adduser $USER kvm
            echo "kvm_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "WARNING: KVM acceleration not available. Emulation will be slow."
            echo "kvm_enabled=false" >> $GITHUB_OUTPUT
          fi
          echo "KVM setup check complete."

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            openjdk-17-jdk \
            wget \
            unzip \
            xvfb \
            x11vnc \
            adb \
            tmate
          sudo rm -rf /var/lib/apt/lists/*

      - name: Set up Android SDK
        id: setup_sdk
        run: |
          # Use the path defined in job env
          SDK_ROOT="${{ env.SDK_ROOT_PATH }}"
          AVD_HOME="${SDK_ROOT}/.android/avd"
          EMULATOR_HOME="${SDK_ROOT}/.android" # Often same parent as AVD_HOME or just $HOME/.android

          echo "Setting ANDROID_SDK_ROOT=${SDK_ROOT}"
          echo "ANDROID_SDK_ROOT=${SDK_ROOT}" >> $GITHUB_ENV
          echo "Setting ANDROID_AVD_HOME=${AVD_HOME}"
          echo "ANDROID_AVD_HOME=${AVD_HOME}" >> $GITHUB_ENV
          echo "Setting ANDROID_EMULATOR_HOME=${EMULATOR_HOME}" # Add this
          echo "ANDROID_EMULATOR_HOME=${EMULATOR_HOME}" >> $GITHUB_ENV # Add this

          # Export for current step
          export ANDROID_SDK_ROOT="${SDK_ROOT}"
          export ANDROID_AVD_HOME="${AVD_HOME}"
          export ANDROID_EMULATOR_HOME="${EMULATOR_HOME}" # Add this
          export PATH="$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/emulator"

          # Set paths for future steps
          echo "${SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${SDK_ROOT}/platform-tools" >> $GITHUB_PATH
          echo "${SDK_ROOT}/emulator" >> $GITHUB_PATH

          # Ensure directories exist
          mkdir -p "$AVD_HOME"
          mkdir -p "$EMULATOR_HOME" # Add this
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"

          echo "Downloading Android Command-line tools..."
          CMDLINE_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-${{ env.CMDLINE_TOOLS_VERSION }}_latest.zip"
          wget -q "${CMDLINE_TOOLS_URL}" -O /tmp/cmdline-tools.zip
          unzip -q /tmp/cmdline-tools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          rm /tmp/cmdline-tools.zip

          echo "Accepting licenses..."
          yes | sdkmanager --licenses --sdk_root="$ANDROID_SDK_ROOT" > /dev/null || true

          echo "Installing SDK packages (API:${{ env.API_LEVEL }}, Target:${{ env.TARGET }}, Arch:${{ env.ARCH }})..."
          sdkmanager "platform-tools" "emulator" "system-images;android-${{ env.API_LEVEL }};${{ env.TARGET }};${{ env.ARCH }}" --sdk_root="$ANDROID_SDK_ROOT"

          # --- Verify Installation ---
          echo "Verifying installed packages..."
          sdkmanager --list_installed --sdk_root="$ANDROID_SDK_ROOT"
          SYS_IMG_PATH="$ANDROID_SDK_ROOT/system-images/android-${{ env.API_LEVEL }}/${{ env.TARGET }}/${{ env.ARCH }}"
          echo "Checking expected system image dir: $SYS_IMG_PATH"
          ls -ld "$SYS_IMG_PATH" || echo "System image directory NOT FOUND at expected location."

          echo "Creating AVD (Name: ${{ env.AVD_NAME }} in default location $ANDROID_AVD_HOME)..."
          # Removed --path, let it use ANDROID_AVD_HOME. Added exit check.
          echo "no" | avdmanager create avd -n "${{ env.AVD_NAME }}" -k "system-images;android-${{ env.API_LEVEL }};${{ env.TARGET }};${{ env.ARCH }}" --device "pixel_5" --force || exit 1

          # --- Critical Verification ---
          echo "Verifying AVD creation..."
          avdmanager list avd
          echo "Contents of AVD directory ($ANDROID_AVD_HOME):"
          ls -la "$ANDROID_AVD_HOME"
          echo "Checking for AVD INI file: ${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.ini"
          ls -l "${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.ini" || echo "AVD INI file NOT found!"
          echo "Checking for AVD Data directory: ${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.avd"
          ls -ld "${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.avd" || echo "AVD DATA DIRECTORY (.avd) NOT FOUND!"

      - name: Start Virtual Display (Xvfb)
        run: |
          echo "Starting Xvfb..."
          Xvfb :99 -screen 0 1280x800x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      - name: Start Android Emulator
        env:
          DISPLAY: :99
        run: |
          # Explicitly export environment variables
          export ANDROID_SDK_ROOT="${{ env.ANDROID_SDK_ROOT }}"
          export ANDROID_AVD_HOME="${{ env.ANDROID_AVD_HOME }}"
          export ANDROID_EMULATOR_HOME="${{ env.ANDROID_EMULATOR_HOME }}" # Add this export
          export PATH="$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/platform-tools"

          echo "--- Emulator Runtime Environment ---"
          echo "Attempting to start emulator for AVD: ${{ env.AVD_NAME }}"
          echo "Using ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "Using ANDROID_AVD_HOME: $ANDROID_AVD_HOME"
          echo "Using ANDROID_EMULATOR_HOME: $ANDROID_EMULATOR_HOME" # Log this
          echo "Checking AVD Data directory: ${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.avd"
          ls -ld "${ANDROID_AVD_HOME}/${{ env.AVD_NAME }}.avd" || (echo "AVD DATA DIRECTORY (.avd) still not found before launch!" && exit 1) # Fail if not found now
          echo "--- Starting Emulator ---"

          emulator -avd "${{ env.AVD_NAME }}" \
                   -verbose \
                   -show-kernel \
                   -no-snapshot \
                   -no-boot-anim \
                   -no-audio \
                   -gpu swiftshader_indirect &

          echo "Waiting for ADB device (timeout 180s)..."
          timeout 180 adb wait-for-device shell exit || (echo "ADB device timed out!" && exit 1)

          echo "Waiting for emulator boot completion (timeout 300s)..."
          timeout 300 adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 5; echo "Waiting for boot..."; done' || (echo "Emulator boot timed out!" && exit 1)

          sleep 5
          adb shell input keyevent 82

          echo "Emulator is ready."
          adb devices

      - name: Setup VNC Server
        env:
          DISPLAY: :99
        run: |
          echo "Starting x11vnc server..."
          x11vnc -display $DISPLAY -forever -shared -nopw -rfbport 5900 &
          sleep 3

      - name: Provide Remote Access via tmate
        id: tmate
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 350

      - name: Echo Connection Instructions After tmate Starts
        if: steps.tmate.outputs.tmateSSHCommand != ''
        run: |
          echo "----------------------------------------------------------------------"
          echo "--- Remote Session Instructions ---"
          echo ""
          echo "1. Connect via SSH: ${{ steps.tmate.outputs.tmateSSHCommand }}"
          echo "2. Open VNC Client on your LOCAL machine."
          echo "3. Connect VNC to: localhost:5900 (No password needed)"
          echo ""
          echo "--- Android Emulator UI should appear. Session timeout: approx ${{ job.timeout-minutes }} minutes ---"
          echo "----------------------------------------------------------------------"
